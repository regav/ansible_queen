---
  - name: Install packages
    dnf:
      name: '@virtualization'
      state: latest

  - name: ensure libselinux-python package is installed
    dnf:
      name: libselinux-python
      state: latest

  - name: start/enable libvirtd service
    systemd:
      enabled: yes
      name: libvirtd
      state: started

  - name: test if KVM module is loaded
    shell: |
     RESULT=$?
     lsmod | grep kvm 1> /dev/null
     if [ $RESULT -eq 1 ] 
     then
       lscpu | awk '/Vendor/' | grep -i intel
       if [ $RESULT -eq 0] 
       then
         modprobe kvm-intel
       else
         modprobe kvm-amd
       fi
     fi
    args:
      executable: /bin/bash

  - name: make template file for br0 device
    template:
      src: ifcfg-br0.j2
      dest: /etc/sysconfig/network-scripts/ifcfg-br0
      group: root
      owner: root
      mode: 0600

  - name: make template file for default-interface device
    template:
      src: ifcfg-eth0.j2
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}"
      group: root
      owner: root
      mode: 0600
    notify:
    - restart network

  - name: make the vm workspace dir
    file:
      owner: root
      group: root
      recurse: yes
      path: "{{ vm_workspace }}"
  
  - name: make the vm iso dir
    file:
      owner: root
      group: root
      recurse: yes
      path: "{{ vm_isos }}"
    
  - name: ensure wget is installed
    dnf:
      name: wget
      state: latest

  - name: copy ubuntu iso
    get_url:
      url: "{{ iso_wget.link }}"
      dest: "{{ vm.iso }}"
#  - name: copy ubuntu iso
#    shell: wget "{{ iso_wget.link }} -O  {{ vm_isos }}{{ iso_wget.name }}"

  - name: make a vm with virsh install
    shell: >
      "virt-install  --name={{ vm.name }} --disk path={{ vm.diskpath }},{{ vm.disk_options }}
      --graphics spice --vcpus={{ vm.vcpus }} --ram={{ vm.ram }} --cdrom={{ vm.iso }}
      --network bridge=br0 --os-type={{ vm.os }} --os-variant=generic"
    args:
      executable: /bin/bash
...
